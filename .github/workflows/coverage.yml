name: Report Coverage

on: [push]

jobs:
  build:
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Environment log
        id: env
        run: |
          echo "::set-output name=yarn-cache-dir::$(yarn cache dir)"
          yarn --version
      - name: Get node_modules cache	
        uses: actions/cache@v1	
        with:	
          path: node_modules	
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}	
          restore-keys: |	
            ${{ runner.os }}-yarn-	
      - name: Get yarn cache	
        uses: actions/cache@v1	
        with:	
          path: ${{ steps.env.outputs.yarn-cache-dir }}	
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}	
          restore-keys: |	
            ${{ runner.os }}-yarn-
      - name: Generate coverage report
        run: |
          yarn --version
          make test-ci-coverage
          # Builds babel-standalone with the regular Babel config
          # test-ci-coverage doesn't test babel-standalone, as trying to gather coverage
          IS_PUBLISH=true make build-standalone
          # data for a JS file that's several megabytes large is bound to fail. Here,
          # we just run the babel-standalone test separately.
          yarn jest "\-standalone/test"
      - name: dump files
        run: |
          find .


